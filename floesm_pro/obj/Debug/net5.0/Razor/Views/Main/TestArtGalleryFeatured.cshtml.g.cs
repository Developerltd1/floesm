#pragma checksum "E:\Web Development\floesm\floesm_pro\Views\Main\TestArtGalleryFeatured.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "a8087bdf104f80cb2cbac06c894b8f5754e238e4"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Main_TestArtGalleryFeatured), @"mvc.1.0.view", @"/Views/Main/TestArtGalleryFeatured.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a8087bdf104f80cb2cbac06c894b8f5754e238e4", @"/Views/Main/TestArtGalleryFeatured.cshtml")]
    public class Views_Main_TestArtGalleryFeatured : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "E:\Web Development\floesm\floesm_pro\Views\Main\TestArtGalleryFeatured.cshtml"
  
    ViewData["Title"] = "ArtGallery Featured";
    Layout = "~/Pages/Shared/_secondLayout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<!DOCTYPE html>\r\n<html>\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a8087bdf104f80cb2cbac06c894b8f5754e238e43044", async() => {
                WriteLiteral(@"
    <meta charset=""UTF-8"">
    <meta http-equiv=""X-UA-Compatible"" content=""IE=edge"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <script src=""https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js""></script>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/fabric.js/4.1.0/fabric.min.js""></script>
    <script src=""https://cdn.metroui.org.ua/v4-dev/js/metro.min.js""></script>

    <title>ArtGalleryFeatured</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js"" integrity=""sha512-2ImtlRlf2VVmiGZsjm9bEyhjGW4dU7B6TNwh/hx/iSByxNENtj3WVE6o/9Lj4TJeVXPi4bnOIMXFIJJAeufa0A=="" crossorigin=""anonymous"" referrerpolicy=""no-referrer""></script>
    <link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/css/select2.min.css"" integrity=""sha512-nMNlpuaDPrqlEls3IX/Q56H36qvBASwb3ipuo3MxeWbsQB1881ox0cRv7UPTgBlriqoynt35KjEwgGUeUXIPnw=="" crossorigin=""anonymous"" referrerpolicy=""no-referrer"" />
    <link re");
                WriteLiteral("l=\"stylesheet\" href=\"https://cdn.metroui.org.ua/v4-dev/css/metro-all.min.css\" />\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
<style>
    .canvas-section {
        background-image: url('https://media.istockphoto.com/photos/empty-minimalist-room-with-gray-wall-on-background-picture-id1129813604?b=1&k=20&m=1129813604&s=170667a&w=0&h=nTa5JGo-SFath8TaWZ8Of_-QeW_H9i53-pPTP02ldE0=');
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
    }

    .select2-selection__arrow {
        display: none
    }

    .setting-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .image-setting-items {
        border: 2px solid;
        padding: 3px 12px;
        line-height: 1;
        cursor: pointer;
        border-radius: 0 !important
    }

    .card {
        border: 0;
        margin-bottom: 12px
    }

    .image-setting-items a {
        color: black;
        text-decoration: none
    }

    .image-setting-area span:last-child {
        font-size: 24px;
        font-weight: 700;
    }

    ");
            WriteLiteral(@".right-panel {
        padding: 15px;
        background: #fff;
        font-size: 18px;
        font-weight: 600;
    }

    button.submit-btn.btn {
        background: black;
        color: white;
        border-radius: 0;
        padding: 10px 20px;
    }

    .searchPaintings {
        display: flex;
        align-items: center;
        grid-gap: 10px;
        margin-bottom: 8px
    }

    .searchImg {
        width: 60px;
        height: 60px;
        min-width: 60px;
    }

        .searchImg img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

    .paintingHeader {
        font-size: 16px;
        font-weight: 500;
    }

    .paintingDesc {
        font-size: 14px;
        font-weight: normal;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .card-body {
        max-height: 267px;
        overflow: auto;
        padding: ");
            WriteLiteral(@"10px 8px;
        background: #e4e4e4;
    }

    .collapse {
        overflow: auto;
        max-height: initial !important;
    }

    .color-selector {
        width: 100% !important
    }

    .color-values-block > div:not(.color-value-hex) {
        display: none
    }

    .color-selector .user-colors-actions {
        display: none !important
    }

    .color-selector .color-map {
        width: 152px;
        height: 144px;
    }

    .searchInput input {
        width: 86%;
        /* margin: auto; */
        border: 0;
        margin-bottom: 6px;
        padding: 3px 6px;
    }
    /*#color_picker:not(.appendedColorPicker){
        display:none !important

    }
    .appendedColorPicker{
        display:block !important;
        position:relative !important
    }*/
</style>
");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a8087bdf104f80cb2cbac06c894b8f5754e238e48135", async() => {
                WriteLiteral("\r\n    <div class=\"row w-100 mx-0 py-5\">\r\n        <div class=\"col-md-9\">\r\n            <div class=\"canvas-area h-100\">\r\n");
                WriteLiteral(@"                <div class=""canvas-section h-100 d-flex align-items-center justify-content-center"">
                    <canvas id=""canvas"" width=780 height=400></canvas>
                </div>

            </div>
        </div>
        <div class=""col-md-3 right-panel"">
            <div class=""image-setting-area"">
                <div id=""accordion"">

                    <div class=""card"">
                        <div class=""image-setting-items card-header"">
                            <a class=""setting-item"" data-toggle=""collapse"" href=""#collapseOne"">
                                <span>Search</span>
                                <span>+</span>
                            </a>
                        </div>
                        <div id=""collapseOne"" class=""collapse"" data-parent=""#accordion"">
                            <div class=""card-body"">
                                <div class=""searchInput text-center"">
                                    <input type=""text"" placeholder=""Ty");
                WriteLiteral(@"pe Here..."" />
                                </div>
                                <div class=""searchPaintings"">
                                    <div class=""searchImg"">
                                        <img src=""https://mymodernmet.com/wp/wp-content/uploads/2018/05/painting-ideas-3-1.jpg"" />
                                    </div>
                                    <div class=""aboutPainting"">
                                        <div class=""paintingHeader"">Painting 1</div>
                                        <div class=""paintingDesc"">Lorem Ipsum is simply dummy text of the printing and typesetting industry.</div>
                                    </div>
                                </div>
                                <div class=""searchPaintings"">
                                    <div class=""searchImg"">
                                        <img src=""https://images.pexels.com/photos/952670/pexels-photo-952670.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1"" ");
                WriteLiteral(@"/>
                                    </div>
                                    <div class=""aboutPainting"">
                                        <div class=""paintingHeader"">Painting 1</div>
                                        <div class=""paintingDesc"">Lorem Ipsum is simply dummy text of the printing and typesetting industry.</div>
                                    </div>
                                </div>
                                <div class=""searchPaintings"">
                                    <div class=""searchImg"">
                                        <img src=""https://images.pexels.com/photos/619419/pexels-photo-619419.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1"" />
                                    </div>
                                    <div class=""aboutPainting"">
                                        <div class=""paintingHeader"">Painting 1</div>
                                        <div class=""paintingDesc"">Lorem Ipsum is simply dummy text of the pri");
                WriteLiteral(@"nting and typesetting industry.</div>
                                    </div>
                                </div>
                                <div class=""searchPaintings"">
                                    <div class=""searchImg"">
                                        <img src=""https://images.pexels.com/photos/1171480/pexels-photo-1171480.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1"" />
                                    </div>
                                    <div class=""aboutPainting"">
                                        <div class=""paintingHeader"">Painting 1</div>
                                        <div class=""paintingDesc"">Lorem Ipsum is simply dummy text of the printing and typesetting industry.</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class=""card"">
                        <div class=""image-set");
                WriteLiteral(@"ting-items card-header"">
                            <a class=""setting-item"" id=""picker_launcher"" data-toggle=""collapse"" href=""#collapseTwo"">
                                <span>background</span>
                                <span>+</span>
                            </a>
                        </div>
                        <div id=""collapseTwo"" class=""collapse"" data-parent=""#accordion"">
                            <div class=""card-body"">
                                <div");
                BeginWriteAttribute("class", " class=\"", 8955, "\"", 8963, 0);
                EndWriteAttribute();
                WriteLiteral(">\r\n");
                WriteLiteral(@"                                    <div id=""color-selector-1"" data-role=""color-selector""></div>
                                    <input type=""file"" id=""BackgroundImage"" onchange=""readURL(event)"" />

                                </div>
                            </div>
                        </div>
                    </div>

                    <div class=""card"">
                        <div class=""image-setting-items card-header"">
                            <a class=""setting-item"" data-toggle=""collapse"" href=""#collapseThree"">
                                <span>Measure</span>
                                <span>+</span>
                            </a>
                        </div>
                        <div id=""collapseThree"" class=""collapse"" data-parent=""#accordion"">
                            <div class=""card-body"">
                                <input type=""text"" onfocusout=""ChangeLengthOfCanvas(this)"" data-Name=""Width"" placeholder=""Enter Width"" />
                  ");
                WriteLiteral(@"              <input type=""text"" onfocusout=""ChangeLengthOfCanvas(this)"" data-Name=""Height"" placeholder=""Enter Height"" />
                            </div>
                        </div>
                    </div>
                    <div class=""card"">
                        <div class=""image-setting-items card-header"">
                            <a class=""setting-item"" data-toggle=""collapse"" href=""#collapseFour"">
                                <span>Lightning</span>
                                <span>+</span>
                            </a>
                        </div>
                        <div id=""collapseFour"" class=""collapse"" data-parent=""#accordion"">
                            <div class=""card-body"">
                                Lorem ipsum..
                            </div>
                        </div>
                    </div>
                    <div class=""card"">
                        <div class=""image-setting-items card-header"">
                            ");
                WriteLiteral(@"<a class=""setting-item"" data-toggle=""collapse"" href=""#collapseFive"">
                                <span>Save</span>
                                <span>+</span>
                            </a>
                        </div>
                        <div id=""collapseFive"" class=""collapse"" data-parent=""#accordion"">
                            <div class=""card-body"">
                                Lorem ipsum..
                            </div>
                        </div>
                    </div>
                    <div class=""card"">
                        <div class=""image-setting-items card-header"">
                            <a class=""setting-item"" data-toggle=""collapse"" href=""#collapseSix"">
                                <span>Favorite</span>
                                <span>+</span>
                            </a>
                        </div>
                        <div id=""collapseSix"" class=""collapse"" data-parent=""#accordion"">
                            <div cl");
                WriteLiteral(@"ass=""card-body"">
                                <div class=""searchPaintings"">
                                    <div class=""searchImg"">
                                        <img src=""https://mymodernmet.com/wp/wp-content/uploads/2018/05/painting-ideas-3-1.jpg"" />
                                    </div>
                                    <div class=""aboutPainting"">
                                        <div class=""paintingHeader"">Painting 1</div>
                                        <div class=""paintingDesc"">Lorem Ipsum is simply dummy text of the printing and typesetting industry.</div>
                                    </div>
                                </div>
                                <div class=""searchPaintings"">
                                    <div class=""searchImg"">
                                        <img src=""https://images.pexels.com/photos/952670/pexels-photo-952670.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1"" />
                                  ");
                WriteLiteral(@"  </div>
                                    <div class=""aboutPainting"">
                                        <div class=""paintingHeader"">Painting 1</div>
                                        <div class=""paintingDesc"">Lorem Ipsum is simply dummy text of the printing and typesetting industry.</div>
                                    </div>
                                </div>
                                <div class=""searchPaintings"">
                                    <div class=""searchImg"">
                                        <img src=""https://images.pexels.com/photos/619419/pexels-photo-619419.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1"" />
                                    </div>
                                    <div class=""aboutPainting"">
                                        <div class=""paintingHeader"">Painting 1</div>
                                        <div class=""paintingDesc"">Lorem Ipsum is simply dummy text of the printing and typesetting industry.</div>");
                WriteLiteral(@"
                                    </div>
                                </div>
                                <div class=""searchPaintings"">
                                    <div class=""searchImg"">
                                        <img src=""https://images.pexels.com/photos/1171480/pexels-photo-1171480.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1"" />
                                    </div>
                                    <div class=""aboutPainting"">
                                        <div class=""paintingHeader"">Painting 1</div>
                                        <div class=""paintingDesc"">Lorem Ipsum is simply dummy text of the printing and typesetting industry.</div>
                                    </div>
                                </div>
");
                WriteLiteral(@"                            </div>
                        </div>
                    </div>
                </div>

                <div class=""button-submit"">
                    <button class=""submit-btn btn"">Add To Cart</button>
                </div>
            </div>
        </div>
    </div>


");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
</html>
<script>

    $('.value-hex').change(function (e) {
        debugger;
        let imageUrl = """";
        $('.canvas-section').css(""background-image"", ""url("" + imageUrl + "")"");
    });

    /* Quadrilateral Transform - (c) Ken Nilsen, CC3.0-Attr */
    var img = new Image();
    img.onload = toggleToResize;
    var toggle = false
    //function toggleAdjustment() {
    //    debugger
    //    toggle = !toggle
    //    if (toggle) {
    //        go()
    //    }
    //    else {
    //        anotherFN()
    //    }
    //}
    img.src = ""https://mymodernmet.com/wp/wp-content/uploads/2018/05/painting-ideas-3-1.jpg"";
    function go() {
        var me = this,
            stepEl = document.querySelector(""input""),
            stepTxt = document.querySelector(""span""),
            c = document.querySelector(""canvas""),
            ctx = c.getContext(""2d""),
            corners = [
                { x: 100, y: 20 },           // ul
                { x: 520, y: 20 },         ");
            WriteLiteral(@"  // ur
                { x: 520, y: 380 },          // br
                { x: 100, y: 380 }           // bl
            ],
            radius = 10, cPoint, timer,  // for mouse handling
            step = 4;                    // resolution

        update();

        // render image to quad using current settings
        function render() {

            var p1, p2, p3, p4, y1c, y2c, y1n, y2n,
                w = img.width - 1,         // -1 to give room for the ""next"" points
                h = img.height - 1;

            ctx.clearRect(0, 0, c.width, c.height);

            for (y = 0; y < h; y += step) {
                for (x = 0; x < w; x += step) {
                    y1c = lerp(corners[0], corners[3], y / h);
                    y2c = lerp(corners[1], corners[2], y / h);
                    y1n = lerp(corners[0], corners[3], (y + step) / h);
                    y2n = lerp(corners[1], corners[2], (y + step) / h);

                    // corners of the new sub-divided cell p1 (");
            WriteLiteral(@"ul) -> p2 (ur) -> p3 (br) -> p4 (bl)
                    p1 = lerp(y1c, y2c, x / w);
                    p2 = lerp(y1c, y2c, (x + step) / w);
                    p3 = lerp(y1n, y2n, (x + step) / w);
                    p4 = lerp(y1n, y2n, x / w);

                    ctx.drawImage(img, x, y, step, step, p1.x, p1.y, // get most coverage for w/h:
                        Math.ceil(Math.max(step, Math.abs(p2.x - p1.x), Math.abs(p4.x - p3.x))) + 1,
                        Math.ceil(Math.max(step, Math.abs(p1.y - p4.y), Math.abs(p2.y - p3.y))) + 1)
                }
            }
        }

        function lerp(p1, p2, t) {
            return {
                x: p1.x + (p2.x - p1.x) * t,
                y: p1.y + (p2.y - p1.y) * t
            }
        }

        /* Stuff for demo: -----------------*/
        function drawCorners() {
            ctx.strokeStyle = ""#09f"";
            ctx.lineWidth = 2;
            ctx.beginPath();
            // border
            for (var i = 0, p; p = c");
            WriteLiteral(@"orners[i++];) ctx[i ? ""lineTo"" : ""moveTo""](p.x, p.y);
            ctx.closePath();
            // circular handles
            for (i = 0; p = corners[i++];) {
                ctx.moveTo(p.x + radius, p.y);
                ctx.arc(p.x, p.y, radius, 0, 6.28);
            }
            ctx.stroke()
        }

        function getXY(e) {
            var r = c.getBoundingClientRect();
            return { x: e.clientX - r.left, y: e.clientY - r.top }
        }

        function inCircle(p, pos) {
            var dx = pos.x - p.x,
                dy = pos.y - p.y;
            return dx * dx + dy * dy <= radius * radius
        }

        // handle mouse
        c.onmousedown = function (e) {
            var pos = getXY(e);
            for (var i = 0, p; p = corners[i++];) { if (inCircle(p, pos)) { cPoint = p; break } }
        }
        window.onmousemove = function (e) {
            if (cPoint) {
                var pos = getXY(e);
                cPoint.x = pos.x; cPoint.y = pos.y;
");
            WriteLiteral(@"                cancelAnimationFrame(timer);
                timer = requestAnimationFrame(update.bind(me))
            }
        }
        window.onmouseup = function () { cPoint = null }

        stepEl.oninput = function () {
            stepTxt.innerHTML = (step = Math.pow(2, +this.value));
            update();
        }

        function update() { render(); drawCorners() }


    }

    function anotherFN() {
        /* Explanations at junerockwell.com */
        var canvas, context;
        var star_img = new Image();
        var isDraggable = false;

        var currentX = 0;
        var currentY = 0;

        window.onload = function () {
            canvas = document.getElementById(""canvas"");
            context = canvas.getContext(""2d"");

            currentX = canvas.width / 2;
            currentY = canvas.height / 2;

            star_img.onload = function () {
                _Go();
            };

            star_img.src = ""https://media.timeout.com/images/");
            WriteLiteral(@"105590782/750/422/image.jpg"";
        };

        function _Go() {
            _MouseEvents();

            setInterval(function () {

                _ResetCanvas();
                _DrawImage();
            }, 1000 / 30);
        }
        function _ResetCanvas() {
            context.fillStyle = '#fff';
            context.fillRect(0, 0, canvas.width, canvas.height);
        }
        function _MouseEvents() {
            canvas.onmousedown = function (e) {

                var mouseX = e.pageX - this.offsetLeft;
                var mouseY = e.pageY - this.offsetTop;


                if (mouseX >= (currentX - star_img.width / 2) &&
                    mouseX <= (currentX + star_img.width / 2) &&
                    mouseY >= (currentY - star_img.height / 2) &&
                    mouseY <= (currentY + star_img.height / 2)) {
                    isDraggable = true;
                    //currentX = mouseX;
                    //currentY = mouseY;
                }
            ");
            WriteLiteral(@"};
            canvas.onmousemove = function (e) {

                if (isDraggable) {
                    currentX = e.pageX - this.offsetLeft;
                    currentY = e.pageY - this.offsetTop;
                }
            };
            canvas.onmouseup = function (e) {
                isDraggable = false;
            };
            canvas.onmouseout = function (e) {
                isDraggable = false;
            };
        }
        function _DrawImage() {
            context.drawImage(star_img, currentX - (star_img.width / 2), currentY - (star_img.height / 2));
        }
    }


    //toggleToResize()
    function toggleToResize() {


        var canvas = document.getElementById(""canvas"");
        var ctx = canvas.getContext(""2d"");

        var canvasOffset = $(""#canvas"").offset();
        var offsetX = canvasOffset.left;
        var offsetY = canvasOffset.top;

        var startX;
        var startY;
        var isDown = false;


        var pi2 = Math.PI * ");
            WriteLiteral(@"2;
        var resizerRadius = 8;
        var rr = resizerRadius * resizerRadius;
        var draggingResizer = {
            x: 0,
            y: 0
        };
        var imageX = 50;
        var imageY = 50;
        var imageWidth, imageHeight, imageRight, imageBottom;
        var draggingImage = false;
        var startX;
        var startY;



        var img = new Image();
        img.onload = function () {
            imageWidth = 720;
            imageHeight = 400;
            imageRight = imageX + imageWidth;
            imageBottom = imageY + imageHeight
            draw(true, false);
        }
        img.src = ""https://mymodernmet.com/wp/wp-content/uploads/2018/05/painting-ideas-3-1.jpg"";


        function draw(withAnchors, withBorders) {
            debugger;
            // clear the canvas
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // draw the image
            ctx.drawImage(img, 0, 0, img.width, img.height, imageX, imageY, imageWi");
            WriteLiteral(@"dth, imageHeight);

            // optionally draw the draggable anchors
            if (withAnchors) {
                drawDragAnchor(imageX, imageY);
                drawDragAnchor(imageRight, imageY);
                drawDragAnchor(imageRight, imageBottom);
                drawDragAnchor(imageX, imageBottom);
            }

            // optionally draw the connecting anchor lines
            if (withBorders) {
                ctx.beginPath();
                ctx.moveTo(imageX, imageY);
                ctx.lineTo(imageRight, imageY);
                ctx.lineTo(imageRight, imageBottom);
                ctx.lineTo(imageX, imageBottom);
                ctx.closePath();
                ctx.stroke();
            }

        }

        function drawDragAnchor(x, y) {
            ctx.beginPath();
            ctx.arc(x, y, resizerRadius, 0, pi2, false);
            ctx.closePath();
            ctx.fill();
        }

        function anchorHitTest(x, y) {

            var dx, dy;

");
            WriteLiteral(@"            // top-left
            dx = x - imageX;
            dy = y - imageY;
            if (dx * dx + dy * dy <= rr) {
                return (0);
            }
            // top-right
            dx = x - imageRight;
            dy = y - imageY;
            if (dx * dx + dy * dy <= rr) {
                return (1);
            }
            // bottom-right
            dx = x - imageRight;
            dy = y - imageBottom;
            if (dx * dx + dy * dy <= rr) {
                return (2);
            }
            // bottom-left
            dx = x - imageX;
            dy = y - imageBottom;
            if (dx * dx + dy * dy <= rr) {
                return (3);
            }
            return (-1);

        }


        function hitImage(x, y) {
            return (x > imageX && x < imageX + imageWidth && y > imageY && y < imageY + imageHeight);
        }


        function handleMouseDown(e) {
            startX = parseInt(e.clientX - offsetX);
            startY");
            WriteLiteral(@" = parseInt(e.clientY - offsetY);
            draggingResizer = anchorHitTest(startX, startY);
            draggingImage = draggingResizer < 0 && hitImage(startX, startY);
        }

        function handleMouseUp(e) {
            draggingResizer = -1;
            draggingImage = false;
            draw(true, false);
        }

        function handleMouseOut(e) {
            handleMouseUp(e);
        }

        function handleMouseMove(e) {

            if (draggingResizer > -1) {

                mouseX = parseInt(e.clientX - offsetX);
                mouseY = parseInt(e.clientY - offsetY);

                // resize the image
                switch (draggingResizer) {
                    case 0:
                        //top-left
                        imageX = mouseX;
                        imageWidth = imageRight - mouseX;
                        imageY = mouseY;
                        imageHeight = imageBottom - mouseY;
                        break;
                   ");
            WriteLiteral(@" case 1:
                        //top-right
                        imageY = mouseY;
                        imageWidth = mouseX - imageX;
                        imageHeight = imageBottom - mouseY;
                        break;
                    case 2:
                        //bottom-right
                        imageWidth = mouseX - imageX;
                        imageHeight = mouseY - imageY;
                        break;
                    case 3:
                        //bottom-left
                        imageX = mouseX;
                        imageWidth = imageRight - mouseX;
                        imageHeight = mouseY - imageY;
                        break;
                }

                if (imageWidth < 25) { imageWidth = 25; }
                if (imageHeight < 25) { imageHeight = 25; }

                // set the image right and bottom
                imageRight = imageX + imageWidth;
                imageBottom = imageY + imageHeight;

                //");
            WriteLiteral(@" redraw the image with resizing anchors
                draw(true, true);

            } else if (draggingImage) {

                imageClick = false;

                mouseX = parseInt(e.clientX - offsetX);
                mouseY = parseInt(e.clientY - offsetY);

                // move the image by the amount of the latest drag
                var dx = mouseX - startX;
                var dy = mouseY - startY;
                imageX += dx;
                imageY += dy;
                imageRight += dx;
                imageBottom += dy;
                // reset the startXY for next time
                startX = mouseX;
                startY = mouseY;

                // redraw the image with border
                draw(false, true);

            }


        }


        $(""#canvas"").mousedown(function (e) {
            handleMouseDown(e);
        });
        $(""#canvas"").mousemove(function (e) {
            handleMouseMove(e);
        });
        $(""#canvas"").mouseup(fun");
            WriteLiteral(@"ction (e) {
            handleMouseUp(e);
        });
        $(""#canvas"").mouseout(function (e) {
            handleMouseOut(e);
        });
    }


    function ChangeLengthOfCanvas(e) {
        let that = $(e);
        let Name = that.attr('data-Name');
        if (Name != null) {
            if (Name.toLocaleLowerCase() == ""width"") {
                $('#canvas').attr('width', that.val());
            }
            else {
                $('#canvas').attr('height', that.val());
            }
        }
    }

    //function ChangeBackgroundImage(e) {
    //    //let that = $(e);
    //    //var image = document.getElementById('output');
    //    //image.src = URL.createObjectURL(e.target.files[0]);
    //}

    //document.getElementById('BackgroundImage').addEventListener('change', readURL, true);
    function readURL(event) {
        var getImagePath = URL.createObjectURL(event.target.files[0]);
        $('.canvas-section').css('background-image', 'url(' + getImagePath + ')'");
            WriteLiteral(@");
    }

    function AppendbackgroundImageofCanvas(e) {
        debugger;

    }

    $("".searchImg"").click(function (e) {
        let imgUrl = e.target.getAttribute('src');
        $('.canvas-section').css('background-image', 'url(' + imgUrl + ')');
    });


    //function readURL() {
    //    debugger;
    //    var file = document.getElementById(""BackgroundImage"").files[0];
    //    var reader = new FileReader();
    //    reader.onloadend = function () {
    //        document.getElementsByClassName('canvas-section').style.backgroundImage = ""url("" + reader.result + "")"";
    //    }
    //    if (file) {
    //        reader.readAsDataURL(file);
    //    } else {
    //    }
    //}

</script>


");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
